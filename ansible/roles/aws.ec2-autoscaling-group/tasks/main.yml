---
# tasks file for ansible-infra.aws-asg
- name: Set bootcommands
  set_fact:
    _bootcmd: |
      - yum update -y ecs-init
      - yum install -y nc telnet bind-utils xfsprogs gcc python27-devel {{ asg_additional_yum_packages }}
      - /usr/bin/easy_install pip
      - /usr/local/bin/pip install --upgrade boto3 boto awscli requests psutil {{ asg_additional_python_pip_packages }}
      {{ asg_additional_user_data_bootcmd }}

- name: Set write_files
  set_fact:
    _write_files: |
      - path: /etc/ecs/ecs.config
        permissions: 0644
        owner: root
        content: |
          {{ lookup('template', 'ecs.config.j2') | indent(4, false) }}
      - path: /etc/profile.d/99-dockercmd.sh
        permissions: 0644
        owner: root
        content: |
          {{ lookup('file', './etc/profile.d/99-dockercmd.sh') | indent(4, false) }}
      - path: /etc/security/limits.d/file_limit.conf
        permissions: 0644
        owner: root
        content: |
          {{ lookup('file', './etc/security/limits.d/file_limit.conf') | indent(4, false) }}
      - path: /etc/sysconfig/docker
        permissions: 0644
        owner: root
        content: |
          {{ lookup('file', './etc/sysconfig/docker') | indent(4, false) }}
      {{ asg_additional_write_files }}

- name: Set runcommands
  set_fact:
    _runcmd: |
      - echo "this only get executed on the first boot"
      {{ asg_additional_user_data_runcmd }}

- name: Determine userdata
  set_fact:
    _launch_config_user_data: |
      #cloud-config
      write_files:
        {{ _write_files | indent(2, false) }}
      bootcmd:
        {{ _bootcmd | indent(2, false) }}
      runcmd:
        {{ _runcmd | indent(2, false) }}
      {{ asg_additional_cloud_config_commands }}

- name: Set launch config volumes fact
  set_fact:
    _launch_config_volumes:
      - device_name: /dev/xvda
        volume_size: "{{ asg_launch_config_root_volume_size }}"
        delete_on_termination: true

- name: Set launch config params fact
  set_fact:
    _launch_config_params:
      name: "{{ asg_ecs_cluster_name }}" # this is used for the hash, the actual LC will have a differnet name ( see _launch_config_name )
      image_id: "{{ asg_launch_config_ami }}"
      key_name: "{{ asg_launch_config_key_name }}"
      region: "{{ aws_region }}"
      profile: "{{ aws_profile }}"
      security_groups: "{{ asg_additional_security_groups + [sg_info_output.group_id] }}"
      instance_type: "{{ asg_launch_config_instance_size }}"
      user_data: "{{ _launch_config_user_data }}"
      instance_profile_name: "{{ asg_launch_config_instance_profile_name }}"
      assign_public_ip: "{{ asg_launch_config_assign_public_ip }}"
      volumes: "{{ _launch_config_volumes + asg_additional_volumes }}"

- name: Set launch config hash fact
  set_fact:
    _launch_config_params_hash: "{{ _launch_config_params | to_json | hash('sha1') }}"

- name: Set launch config name fact
  set_fact:
    _launch_config_name: "{{ asg_ecs_cluster_name }}_{{ _launch_config_params_hash }}"

- name: Launch configuration
  ec2_lc: "{{ _launch_config_params | combine({'name': _launch_config_name }) }}"
  register: app_launch_config

- name: create autoscaling group
  ec2_asg:
    name: "{{ asg_ecs_cluster_name }}"
    launch_config_name: "{{ app_launch_config['name'] }}"
    region: "{{ aws_region }}"
    profile: "{{ aws_profile }}"
    min_size: "{{ asg_min_size }}"
    max_size: "{{ asg_max_size }}"
    desired_capacity: "{{ asg_desired_capacity }}"
    vpc_zone_identifier: "{{ asg_subnets }}" # | join(',')
    health_check_type: EC2
    health_check_period: 300
    tags: "{{ asg_tags }}"
