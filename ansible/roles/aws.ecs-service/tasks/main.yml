---
# tasks file for aws.ec2-service
- name: Apply default values to containers
  set_fact:
    _taskdefinition_containers_with_defaults: "{{ (_taskdefinition_containers_with_defaults | default([])) +
                                                    [ ecs_containers_defaults | combine(item) ] }}"
  with_items: "{{ ecs_taskdefinition_containers }}"
  when: ecs_apply_container_defaults


## Create task definition
- name: Create task definition
  ecs_taskdefinition:
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    containers: "{{ _taskdefinition_containers_with_defaults | default(ecs_taskdefinition_containers) }}"
    state: "{{ ecs_taskdefinition_state }}"
    family: "{{ ecs_taskdefinition_family }}"
    revision: "{{ ecs_taskdefinition_revision | default(omit) }}"
    task_role_arn: "{{ ecs_taskdefinition_task_role_arn | default(omit) }}"
    network_mode: "{{ ecs_taskdefinition_network_mode }}"
    volumes: "{{ ecs_taskdefinition_volumes }}"
  register: _task_definition

# tasks file for aws.ec2-service
- name: Apply default values to containers
  set_fact:
    _load_balancers: "{{ _elb_ecs_load_balancers | default(ecs_load_balancers) }}"

- name: Register ECS service
  ecs_service:
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    state: present
    name: "{{ ecs_service_name }}"
    cluster: "{{ ecs_cluster_name }}"
    task_definition: "{{ _task_definition['taskdefinition']['taskDefinitionArn'] }}"
    load_balancers: "{{ _load_balancers }}"
    role: "{{ ecs_role if _load_balancers|length > 0 else omit }}"
    desired_count: "{{ ecs_service_desired_count }}"
    deployment_configuration: "{{ ecs_deployment_configuration }}"
    # placement_strategy: <pending merge of ansible PR>
    # placement_constraint: <pending merge of ansible PR>
